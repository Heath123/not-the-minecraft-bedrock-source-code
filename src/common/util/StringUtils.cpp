Util::compress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
Util::decompress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
Util::removeIllegalChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
Util::removeChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::stripQueryParametersFromUrl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::stripProtocolFromUrl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::stringIsInVector(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::trimVectorStrings(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)
Util::hashCode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::removeAllColorCodes(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::findLastColorCode[abi:cxx11](gsl::basic_string_span<char const, -1l>, bool)
Util::span_find(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>)
Util::safeString[abi:cxx11](char const*)
Util::utf8lenDelta(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::utf8lenNoColorCodes(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::utf8substring(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int)
Util::appendUtf8Character(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int)
Util::replaceSingleUtf8CharacterWithAscii(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)
Util::replaceUtf8CharactersWithAscii(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > const&)
Util::simpleFormat(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
Util::toNiceString[abi:cxx11](int)
Util::toString[abi:cxx11](float, int)
Util::caseFold[abi:cxx11](gsl::basic_string_span<char const, -1l>)
Util::isIntegral(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
Util::urlEncode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::freeStringMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
Util::countWordOccurrences(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>)
Util::isValidPath(gsl::basic_string_span<char const, -1l>)
Util::formatTickDuration[abi:cxx11](int)
Util::getFilesizeString[abi:cxx11](unsigned long)
Util::splitString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)
Util::stringContains(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)
Util::toInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int&, int, int)
Util::boolToString[abi:cxx11](bool)
Util::toBool(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool&)
Util::anonymizeIPAddress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::isValidIPv4(gsl::basic_string_span<char const, -1l>)
Util::isValidIPv6(gsl::basic_string_span<char const, -1l>)
Util::anonymizeIPv6Address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::isValidIP(gsl::basic_string_span<char const, -1l>, bool, bool)
Util::isValidIPAndPort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)
Util::_recordProfanityLocationInWord(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&, int, int, std::set<std::pair<int, int>, std::less<std::pair<int, int> >, std::allocator<std::pair<int, int> > >&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
Util::_breakIntoWordsAndFindProfanity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&, std::unordered_set<char, std::hash<char>, std::equal_to<char>, std::allocator<char> > const&, std::set<std::pair<int, int>, std::less<std::pair<int, int> >, std::allocator<std::pair<int, int> > >&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
Util::filterProfanityFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
Util::HashString::HashString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::HashString::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::HashString::operator=(Util::HashString const&)
Util::HashString::operator==(Util::HashString const&) const
Util::HashString::operator!=(Util::HashString const&) const
Util::HashString::operator<(Util::HashString const&) const
Util::HashString::getString[abi:cxx11]() const
Util::CaseInsensitiveHash::operator()(gsl::basic_string_span<char const, -1l>) const
Util::CaseInsensitiveCompare::operator()(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>) const
Util::getTimeStamp[abi:cxx11]()
Util::isNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::isNumberStringGreaterThan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::isNumberStringLessThan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
Util::toSafeNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long&)
Util::toSafeNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&)
Util::isWhiteSpace(char)
Util::isDigit(char)
Util::isAlphaNumeric(char)
Util::isAlphabeticChar(char)
Util::isLowerCaseAlphabetic(char)
Util::isUpperCaseAlphabetic(char)
Util::isUpperCaseAlphaHex(char)
Util::isLowerCaseAlphaHex(char)
Util::isStartIdentifierChar(char)
Util::isIdentifierChar(char)
